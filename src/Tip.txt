
[코테 팁들 정리]

- ArrayList로 이차원 그래프 구현
    (1) 2차원 ArrayList
        static ArrayList<ArrayList<int[]>> map = new ArrayList<>();
        for(int i = 0 ; i <= N ; i++){
            map.add(new ArrayList<>());
        }

    (2) ArrayList 배열 (이게 더 와닿긴하는듯)
        static ArrayList<int[]>[] graph2 = new ArrayList[n+1];
        for(int i = 0 ; i < n+1 ; i++){
            graph2[i] = new ArrayList<>();
        }

- 위상정렬
    1. 이중 ArrayList 사용해서 arr.get(본인).add(next);로 순서 정의
    2. int[] indegree로 본인을 가르키고있는 노드의 count 저장
    3. 큐 or 우선순위큐에 indegree 0 인것들 집어넣기
    4. 하나씩 꺼내면서 로직처리후 arr의 next의 indegree값 --
    5. indegree-- 해서 0된거 존재하면 큐 or 우선순위큐에 넣기
    6. 큐 or 우선순위큐 빌때까지 반복

    ex) Topological/BOJ1766

- int[][] map에서 값을 ____ 4비트로 동서남북 가능한 방향을 표시하는 아이디어
    ex) etc/BOJ10655

- 유니온 파인드
    find : x의 부모를 찾는 연산으로 x가 parent[x]랑 같은지 확인 후 같으면 본인을 return
        다르면 parent[x]로 find연산을 다시 수행 (x==parent[x] 찾을 때 까지)
        그리고 return 시에 parent[x] = find(parent[x]); 정리해주기

    union : 먼저 find로 x와 y의 parent를 찾는다.
        만약 parent가 다르다면 연결해주기

    ex) etc/BOJ1976

- 다익스트라
    - 그래프 최단 경로 구하는 알고리즘, 양의 가중치만
    - O(mlogn)
    1. 출발지를 pq에 넣고, check를 true로, dist는 0넣기
    2. pq에서 꺼내서 now에 저장하고 방문 체크
    3. 갈수 있는 정점중 현재 dist랑 now의 dist + now에서 next거리 비교
    4. 변경되면 pq에 넣기

    ex) graph/dijkstra_basic.java

    + 플로이드 와샬 : graph/FloydWrasahll_basic , etc/BOJ10159
        => graph[i][j] = Math.min(graph[i][j], graph[i][k]+graph[k][j]) 논리

- 순열, 조합 연습
    - 순열 : etc/BOJ18429
    - 조합 : implement/BOJ15683

- 소수점 출력
    System.out.printf("%.2f",res);

- DFS를 돌릴려는데 너무 경우의 수가 많은 경우에 결정문제로 바꿔보기 (아이디어 배우기)
    문제가 어떤 거에 대한 최소/최대 값을 물을 경우
    최소/최대의 결과로 나올 수 있는 수의 범위에 대해 이분탐색을 적용
    이분 탐색으로 돌면서 해당 값이 최소/최대가 될 수 있는 지 체크!!!

- 다익스트라, 유니온 파인드, 위상정렬 시간나면 계속 반복!

- sout로 출력하는거 보다 StringBuilder가 시간복잡도 작음!!

- 조합 관련 문제를 풀때 DFS로 풀면 시간 초과날 수 있음 -> DP로 풀기
    n+1Cr+1 = nCr + nCr+1 성질 이용
    nC0 = nCn = 1

- 자바로 순열 조합 구현 DFS로 풀어보고 익숙해지면 DP도 해보자!

- DP 재귀로 풀때 DP 저장소 확인 후, 만약 값이 정해지지 않았으면 계산해서 넣어주기
    또 계산하는 과정에서 DP 재귀로 계속 들어가다가
    제일 처음 [0] or [1] 부분은 이전에 값을 넣어뒀으니 그걸 기준으로 다시 계산하면서 돌아오는 식으로  생각!

- long 타입 int 타입 조심!

- 동시 다발적으로 일어나는 경우 큐를 사용해서 BFS로 구현하는 방법
    map에다가 필요한 값 저장하는 거 생각!

- DFS BFS 문제중 안쪽 공간 신경안쓰고 외부만 신경써야하는 문제들은 map의 크기를 상하좌우 1칸씩 늘린다음
    (0,0)에서 DFS,BFS 돌리고 로직 처리하면 간단!
    -> ex) BOJ_2636 , BOJ_5547

- Arrays 익히기
    Arrays.asList(array) : 배열을 ArrayList로 바꿔줌
    Arrays.copyOf(array, copyArrayLenght) : 복사
    Arrays.copyOfRange(array, startIntex, endIndex) : 배열 부분 복사
    Arrays.fill(array, n) : 동일한 값 채우기
    Arrays.equals(array1, array2) : 배열 동일한지 비교
    Arrays.deepEquals(array1, array2) : 다차원 배열 같은지 비교
    Arrays.binarySearch() : 배열의 요소를 검색하여 인덱스 반환 (sort하고 사용해라)
        - 없으면 음수 리턴
    Arrays.sort(array) : 정렬

- 백트래킹 + 조합 idea (samsung/BOJ_14889 요약)
    문제가 만약 모든 상황을 고려해야할때(조합)
    - 모든 상황을 DFS 조합으로 만들고
    - 각 상황에 대해서 팀의 값 차이를 비교(추가적인 로직)한다

- 백트래킹은 전략 짜는게 중요한듯
    - 어떤식으로 DFS에 들어갈지
    - 매개변수를 어떤 식으로 정할지 (최대한 단순화)
    - 정지 조건도 중요!
    - 트리 짜를수있는 경우 있으면 짜르기

- map에서 동,남,서,북(시계) 움직일때
    static int[] dx = {0,1,0,-1};
    static int[] dy = {1,0,-1,0};
    - 여기서 dx값이 map[x][y]에서 x 이동 -> 위아래 이동
    - 여기서 dy값이 map[x][y]에서 y 이동 -> 왼쪽 오른쪽으로 이동

- 조합 방식 생각하기
    - 1부터 N까지의 모든 수 중, M개를 고르는 상황일 때
    - 매개변수 : idx(해당 index 뒤에 숫자 중 하나 선택), count(선택 갯수)
    private static void chickenDFS(int idx, int count) {
        // 정지 조건
        if(count == M){
            ~
        }

        // DFS 들어가기
        for(int i = idx ; i < chickens.size() ; i++){
            picks.add(i);
            chickenDFS(i+1,count+1);
            picks.remove(picks.size()-1);
        }
    }



