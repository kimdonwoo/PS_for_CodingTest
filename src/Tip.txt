[코테 팁들 정리]

- ArrayList로 이차원 그래프 구현
    (1) 2차원 ArrayList
        static ArrayList<ArrayList<int[]>> map = new ArrayList<>();
        for(int i = 0 ; i <= N ; i++){
            map.add(new ArrayList<>());
        }

    (2) ArrayList 배열 (이게 더 와닿긴하는듯)
        static ArrayList<int[]>[] graph2 = new ArrayList[n+1];
        for(int i = 0 ; i < n+1 ; i++){
            graph2[i] = new ArrayList<>();
        }

- 위상정렬 (별로 안어려움)
    1. 엣지를 이중 ArrayList 사용해서 arr[now].add(next);로 순서 정의
    2. int[] indegree로 본인을 가르키고있는 노드의 count 저장
    3. 큐 or 우선순위큐에 indegree 0 인것들 집어넣기 (우선순위큐는 특정 순서 지키고 싶을 때)
    4. 하나씩 꺼내면서 로직처리후 now의 next중 next의 indegree 값--
    5. indegree-- 해서 0된거 존재하면 큐 or 우선순위큐에 넣기
    6. 큐 or 우선순위큐 빌때까지 반복

    ex) Topological/BOJ1766

- int[][] map에서 값을 ____ 4비트로 동서남북 가능한 방향을 표시하는 아이디어
    - 한 지점에서 동서남북중 이동 가능한 방향에 대해 +1,+2,+4,+8
    ex) etc/BOJ10655

- 유니온 파인드
    - graph의 모양이 바껴도 상관없이 같은 graph인지 판단하는 파악할 때 적용
    - find : x의 부모를 찾는 연산으로 x가 parent[x]랑 같은지 확인 후 같으면 본인을 return
        다르면 parent[x]로 find연산을 다시 수행 (x==parent[x] 찾을 때 까지)
        그리고 return 시에 parent[x] = find(parent[x]); 정리해주기
    - union : 먼저 find로 x와 y의 parent를 찾는다.
        만약 parent가 다르다면 연결해주기

    ex) etc/BOJ1976

- 순열, 조합 연습
    - 순열 : etc/BOJ18429
    - 조합 : implement/BOJ15683

- 소수점 출력
    System.out.printf("%.2f",res);

- 조합 관련 문제를 풀때 DFS로 풀면 시간 초과날 수 있음 -> DP로 풀기
    n+1Cr+1 = nCr + nCr+1 성질 이용
    nC0 = nCn = 1

- DP 재귀로 풀때 DP 저장소 확인 후, 만약 값이 정해지지 않았으면 계산해서 넣어주기
    또 계산하는 과정에서 DP 재귀로 계속 들어가다가
    제일 처음 [0] or [1] 부분은 이전에 값을 넣어뒀으니 그걸 기준으로 다시 계산하면서 돌아오는 식으로  생각!

- long 타입, int 타입 조심!

- 동시 다발적으로 일어나는 경우 큐를 사용해서 BFS로 구현하는 방법
    - 현재 큐에 저장된 size만큼 큐 돌기
    - map[][] 에다가 필요한 값 저장하는 거 생각! ex) 몇번째 turn인지 저장

- DFS/BFS 문제중 안쪽 공간 신경안쓰고 외부만 신경써야하는 문제들은 map의 크기를 상하좌우 1칸씩 늘린다음
    (0,0)에서 DFS,BFS 돌리고 로직 처리하면 간단!
    -> ex) BOJ_2636 , BOJ_5547

- Arrays 익히기
    Arrays.asList(array) : 배열을 ArrayList로 바꿔줌
    Arrays.copyOf(array, copyArrayLenght) : 복사
    Arrays.copyOfRange(array, startIntex, endIndex) : 배열 부분 복사
    Arrays.fill(array, n) : 동일한 값 채우기
    Arrays.equals(array1, array2) : 배열 동일한지 비교
    Arrays.deepEquals(array1, array2) : 다차원 배열 같은지 비교
    Arrays.binarySearch() : 배열의 요소를 검색하여 인덱스 반환 (sort하고 사용해라)
        - 없으면 음수 리턴
    Arrays.sort(array) : 정렬

- 백트래킹 + 조합 idea (samsung/BOJ_14889 요약)
    문제가 만약 모든 상황을 고려해야할때 (조합)
    - 모든 상황을 DFS 조합으로 만들고
    - 각 상황에 대해서 팀의 값 차이를 비교(추가적인 로직)한다
    - 예를들어 빈공간에 n개의 건물을 설치한다고 하면
        - 빈공간을 모두 ArrayList에 저장하고 DFS(int depth)로 n개 선택하기

- 백트래킹은 전략 짜는게 중요한듯
    - 어떤식으로 DFS에 들어갈지
    - 매개변수를 어떤 식으로 정할지 (최대한 단순화)
    - 정지 조건도 중요!
    - 트리 짜를수있는 경우 있으면 짜르기

- 조합 방식 생각하기
    - 1부터 N까지의 모든 수 중, M개를 고르는 상황일 때
    - 매개변수 : idx(해당 index 뒤에 숫자 중 하나 선택), count(선택 갯수)

    private static void chickenDFS(int idx, int count) {
        // 정지 조건
        if(count == M){
            ~
        }

        // DFS 들어가기
        for(int i = idx ; i < chickens.size() ; i++){
            picks.add(i); // -> int[] M개 배열에 담는게 더 속도 빠를듯
            chickenDFS(i+1,count+1);
            picks.remove(picks.size()-1);
        }
    }

- 특정값을 % N해서 범위 안에 넣어야하는 상황일 때, 만약 결과가 음수가 나오면 (그냥 - 랑 % 같이 쓰지마라)
    c[0] = (c[0]+dx[d]*s)%N;
    c[0] = c[0] < 0 ? c[0]+N : c[0];
    이렇게 음수면 +N 한번 더 해주면됨

- ********문제 잘 읽는것이 제일 기본!!

- 2차원 배열 움직임 연습하기
    ex) samsung/BOJ_17144

- ArrayList<meteor>에 정보들 모두 저장
    - 배열 한바퀴 돌면서 파이어볼 이동시키고 결과 ArrayList<meteor>[][] map;에 add
    - map[][] 돌면서 하나의 칸에 2개 이상있으면 분열 계산하고

    - ArrayList<meteor>[][] map에 대해 이미지 머리에 그리기
        -> 각 map[][]이라는 2차원 배열에 meteor를 담는 ArrayList 주소가 담기는거!

- 2차원 배열 문제에서 행과 열에 따로따로 적용해야하는 문제에 대해서
    - 행에 대해서만 함수를 만들고 배열 상태를 행과 열을 뒤집어 해당 같은 함수로 한번 더 적용하는 아이디어
    - 행은 ------ 열은 ㅣㅣㅣㅣㅣ

- for(int j = temp.size()-1 ; j >= 0  ; j--){}
    - ArrayList temp 뒤에서 부터 돌기

- 자료구조에 따라 연산의 시간 복잡도랑 자료구조 이미지 머리에 그리기!!!
    - ArrayList : 그냥 resize 되는 일반 배열
        - get(idx) : O(1) (<- 헐 지금까지 O(n)인줄..!)
        - add() : O(1)
        - remove()/insert()/contains : O(n)
    - LinkedList : Linked 배열
        - get(idx) : O(n)
        - add()/insert() : O(1) amortized // 흠..
        - remove() : 접근하는데 시간걸림 / contains : O(n)
    - HashSet : 순서 x , null 가능
        - add() : O(1)
        - contains() : O(1)
    - LinkedHashSet : 순서 o , null 가능
        - add() : O(1)
        - contains() : O(1)
    - HashMap : key-value, 순서 x, null 가능
        - get() : O(1)
        - containsKey() : O(1)
    - LinkedHashMap : key-value, 순서 o, null 가능
        - get() : O(1)
        - containsKey() : O(1)
    - PriorityQueue
        - offer() : O(logN)
        - peek() : O(1)
        - poll() : O(logN)
        - size() : O(1)
     - Queue (= LinkedList)
        - offer()/Enqueue : O(1)
        - peek() : O(1)
        - poll()/Dequeue : O(1)
        - size() : O(1)
        - search : O(n)
     - Stack
        - push : O(1)
        - pop : O(1)
        - peek(idx) : O(n)
     - Deque = LinkedList
        - 앞추가 : addFirst() / 뒷추가 : addLast()
        - 앞삭제 : removeFisrt-poll() / 뒷삭제 : removeLast-pollLast()
        - 앞조회 : peek() / 뒷조회 : peekLast()

- 반복문으로 특정 자료구조 순회하고 있을 때,
    해당 자료구조에 삽입/삭제를 하게 되면 순서 꼬일 수 있다 !! 조심!!
    foreach문은 에러 뜸

- DFS나 BFS에서 모든 빈칸에 들어갔는지 체크할 경우
    - 먼저 첫 map을 초기화할때 빈칸의 갯수를 zero_cnt++를 통해 체크를한다.
    - 그리고 DFS/BFS를 돌면서 조건을 만족하여 해당 위치로 이동할때 cnt++를한다.
    - 다돌고나서 zero_cnt == cnt 이면 모든 칸을 들어간것임
    - 이렇게 하면 추가적인 시간복잡도 없이 해결 가능 !!

- Arrays.sort 또는 Collections.sort 할때
    - (o1,o2)에서 작은 값부터 정렬 (오른차순 정렬)을 할려면 return o1-o2;를 해라
    - 즉, 순서대로 빼면 오름차순임!

- 당연한 얘기지만 BFS로 조건을 만족하는 가장 가까운 대상을 찾을 때,
    대상을 찾고나서 변화하는 것에 대해서는 신경안써도 됨!

- map[][]에서 이동 방향에 따라 주변에 변화가 다르게 적용되는 문제
    - dx,dy는 평소처럼 사용
    - dx,dy 이동 방향에 따라 이동량이 다른 경우에는 numOfMove도 방향에 맞게 정의
    - dx,dy 방향에 맞게 변화 위치를 dxOf[][], dyOf[][]에 정의
    - 만약 위치에 따라 값도 변화한다면 dxOf,dyOf에 2차배열순서에 맞게 값도 적용 ratioOf등으로
    - ex) samsung/BOJ_20057

- 주사위 문제에서
    - 특정 값이 바닥에 있을 때, 동서남북 방향에 값이 항상 바뀜
    - 즉, 미리 특정 숫자의 동쪽에 어떤 숫자가 있다고 배열로 미리 설정하는 방식 x
    - 굴릴때마다 배열에 값 넣는 방식으로 하자

- 변하는 값이 규칙이 없다면 배열을 활용해라
    - 예를들어, 방향을 가지고 있는 상황이고 조건에 따라 시계 방향, 반시계 방향으로 바꾸는 상황이라고 가정하자
    - 이때, 만약 시계/반시계 방향으로 돌리는 것에 규칙이 없다면 static int[][] dir = {{1,2},{3,0},{0,3},{2,1}};
    - 이런식으로 방향이 0일때 시계 : d = dir[d][0] / 반시계 : d = dir[d][1] 이런 식으로 구현 가능

- 2차원 배열에 동서남북 방향에 따라 어떤 메소드를 적용하는 문제에서
    - 방향에 따라 다르게 메소드를 구현하는 것이 어려울 때 팁 !
    - 메소드는 가장 구현하기 쉬운 하나의 방향으로 구현하고 적용하기전에 map[][]을 시계/반시계/.. 이렇게 뒤집어서 메소드 적용
    - map[][]을 뒤집을때 시간복잡도 생기니 주의 !!

- map[][]이 있는 상황에서 메소드(ex. dfs)에 매개변수에 넣을 때,
    - map[][]을 넣으면 깊은 복사 적용되어서 값만 복사됨
    - 하지만 map[]을 넣으면 해당 배열 주소가 얕은 복사가 되어서 메소드에서 값 바뀌면 그것이 map[][]에 반영이 됨.

- 배열 clone , Arrays.copyOf 하면 깊은 복사 즉, 값만 복사됨

- 배열 n번 shift 하는 방법
    1. 2차원 for문으로 직접 다 밀기
    2. 같은 크기의 배열 temp하나 만들어서 shift한 결과를 다 저장하고 배열주소 넣기 <= 이걸로 하자
        -> shift할때 값 덮어써서 곂치는 부분 생각안해도 됨
    3. 마지막에 겹치는 부분 따로 저장해두고 다 shift하기

- 백트래킹 + 조합 구현
    backtracking(){
        // 1. 모든 선택 완료일 경우 + return;

        // 2. for문으로 현재상황에서 선택할 수 있는 모든 상황에 대해서 백트래킹
        //      -> for문 돌리고 해당 i에 대해서 다음 depth에 변경되는 값들 계산해서
        //      -> 값넣고 visit 체크하고 다음 backtracking() 들어가기
        //      -> 나오고 나서 값들이랑 visit 원래대로 돌리기
    }

- 2차원 배열에서 아래쪽으로 shift할때
    - 제일위에서 new boolean해줘야한다. 안하면 map[0]이랑 map[1]의 주소가 같아진다.
    예시) for(int i = 5 ; i > 0 ; j--){
             map[i] = map[i-1];
         }
         map[0] = new boolean[4];

- 2차원 배열 boolean[][] map = new boolean[5][5]에서
    - 만약 boolean[1]이 모두 true or false 일때 조건 발생
        : boolean flag = false하고 for(i)문 돌면서 if(!map[i][j]) flag = true;
           다 돌았을때, flag가 그대로 false이면 조건 발생
    - 만약 boolean[1]이 하나라도 true/false일때 조건 발생
        : for(i)문돌리고 if(boolean[1][i]){조건}, 조건 끝나면 상황에 따라 break or continue;

- 구현문제에서 int[][] map에 원소들 넣고 HashMap<Integer,int[]> hm에 i,j,d를 추가하는 식으로 구현할 경우
    - 항상 map과 hm은 세트라는 걸 잊지말자 !!
    - 즉, map이 바뀌는 상황에서는 항상 hm에도 반영이 되어야하고 그 반대도 마찬가지!
    - 백트래킹을 사용했을 때도, 매개변수로 map을 넣어야한다면 hm도 매개변수로 사용함을 잊지말자

- map을 사용하는 문제에서 백트래킹으로 구현하는 경우
    - 각 상황(백트래킹 깊이)마다 map의 변경이 많아서 다시 이전 map으로 되돌릴 수 없는 상황이라면
    - static map으로 하지말고 새로운 newMap을 할당받아 clone을 한뒤 매개변수로 넣어줘라 !!
    - 메모리는 많이 들지만(조심), 구현상으로는 훨씬 편할 수 있음 !!
    - 매개 변수 넣을때, map이랑 세트인 저장소가 있다면, 걔들도 같이 매개변수가 되어야 함
        : 그렇지 않으면 각 backtracking들이 서로 영향을 준다!

- ArrayList<int[]>[][] map : int[] 주소를 ArrayList로 저장하는 자료구조의 주소를 2차원 배열로 저장하는 map
    - space라는 class로 space[][] map = new space[N][N];를 하면 현재 이것은 space의 주소를 저장할 2차원 공간만 확보한 것!
    - space 자료구조를 생성한것이 아님!!
    - 따라서 for-i,j 돌면서 map[i][j] = new space();로 할당을 해주어야 한다.

- 그냥 x,y와 같은 위치만을 나타내는 간단한 객체들은 int[]로 구현하지만, 복잡해지고 타입을 많이 가져야하는 경우는 class를 정의하자

- ArrayList<Integer> temp에서 for(int t : temp)를 돌리면 t는 그냥 값만 복사한 것
    - 이때 temp.remove 하면 에러뜸 (ArrayList<int[]> 도 마찬가지)
    - 또한 t 값을 바꾸면 temp에 반영이 안되기때문에 반영하고 싶으면 temp.set을 써라

- 행(i)이 가장 큰 것을, 그것도 여러개면 열(j)이 가장 큰 것
    - 우선 순위가 i 부터, 근데 i가 같으면 j로
        ex) if(o2.basic.i == o1.basic.i){
                return o2.basic.j - o1.basic.j;
            }else{
                return o2.basic.i - o1.basic.i;
            }

- 완전 탐색에서 모든 조합 상황에 대해 특정 값의 최솟값을 찾는 문제에서 최솟값을 가지는 조합상황이 여러 개 일때
    - 해당 상황을 모두 ArrayList에 넣고 마지막에 정렬해서 출력하는게 속도 더 빠름
    - 하지만 사전식이라면 처음 완전 탐색에서 들어가는 순서를 조정함으로써 해결가능할수도 있음

- 문자열 합칠때는 String 사용하지말고 StringBuilder 적극 활용해라 !
    - String은 불변이기 때문에 A 문자열과 B 문자열을 합칠 때, C배열을 새로 선언한다음 A와 B를 복사하는 방식임
    - StringBuilder는 불변이 아니고, 미리 일정한 크기의 배열을 잡아두고 거기에 붙여나가는 방식

- StringBuilder 시간 복잡도
    - append(String str) : str 길이가 n일때 O(n)
    - insert(int offset, String str) : O(n + m)
    - delete : O(n)
    - deleteCharAt : O(n)
    - replace(int start, int end, String str) : O(n + m) - 현재 버퍼 : n , 대입할려는 문자열 : m
    - reverse() : 현재 버퍼의 길이가 n이면 O(n)
    - indexOf(String str) : O(n)

- BFS 처럼 큐에 값넣고 처리하는 방식 설계 시 조심!! (??)
    - 예를들어 (0~49) 사이즈의 배열을 큐에 넣고 양쪽에 하나씩 줄이면서 큐에 넣는 상황일 때
    - (1~49) (0~48) -> (2~49) (1~48) (1~48) (0~47) 즉, 이렇게 겹치는 상황이 생김
    - 겹치는 상황인지 아닌지 판단잘하자!!
    - 이러한 경우 그냥 BFS 필요없이 배열로 해결가능한 경우 있음 <- 훨씬 간단

- map[N][M]에서 백트래킹들어갈 때, 매개변수에 count 넣기
    - int x = count / M;
    - int y = count % M;
    - if(count == N*M) return;
    - 이러면 map[x][y] 모두 접근 가능

- dp 문제는 모든 상황에서 규칙적인 현재 상황과 이전 상황이 존재하는지 체크
    - 있다면 그것을 식으로 정의하는 것이 중요

- 불가능한 상황에 대해 -1 출력하라는거 놓치지말자 !

- 배낭 문제에서 dp 푸는 방향 2가지 생각
    1. 먼저 arr[0]에 대해서 모든 배열에 반영 후, 이후에는 arr[0] 생각하지 않기
        이런 방식으로 모든 arr[n]에 대해서 적용하기
    2. dp[i] = dp[i-arr[0]] + dp[i-arr[1]] + dp[i-arr[2]] + ...

- dp 문제 진짜 감이 하나도 안잡히면, 예제 직접 하나씩 적어가면서 규칙 찾기 -> 이러다 감 잡히는 경우도 있음 !!
    - 값이 변하는 순간을 잘 포착해야 함. 계속 규칙적으로 변할때 어느 조건에서 값이 변하는걸까 ? 이생각하면서 문제 읽자
    - ex) LCS 문제는 동일한 값이 만나는 순간에 값이 증가함 !
    - 뭔가 찾아가는 것이 아닌 이전 상황을 바라보듯이 문제를 바라봐야함

- dp 문제에서 어떤 것을 표현 + 저장해야할지 정리하고 나서 표현할게 4개라면 과감하게 3차원 배열 써라!!!

- map[][] 문제에서 특정 i,j에서 특정 방향으로 계속 증가하는 상황
    - while(true)돌리면서 +dx,+dy해주기
    - 만약 조건 or 범위 벗어나면 break하면 그 값임

- TreeSet : 중복 값 제거에, 순서 유지

- 값 범위가 2^31-1 까지라고하면 int형 / 2^63이면 long을 써라

- LIS(최장 증가 수열) 찾는 문제 DP로 푸는 방법 (이건 O(N^2))
    - dp 1로 초기화 한다.
    - 해당 수열을 처음부터 돈다 (i)
    - j = 0 ~ i-1 까지 모두 돌면서 i번째 수보다 작은 값이 있는지 체크한다
        - 작은 j에 대해서 dp[i] = Math.max(dp[i], dp[j]+1);를 적용
    - 3 7 5 2 6 1 4 --> 3 5 6 이 젤 긴 수열임
    - DP는 항상 현재 상황의 관점에서 가능한 이전 상황이 뭐가 있는지 확인하는 것이 중요!!

- 순서가 있는 일처리 문제 (+ N번째 일은 1~N-1중 일들 끝나고 가능)
    - i번째 일은 먼저 끝나야하는 일들 중 제일 늦게 끝난 일부터 시작한다고 생각하면 됨 (dp)

- 플로이드 알고리즘으로 가중치 없이 특정 노드에서 갈수 있는 모든 노드 찾기도 가능
    - boolean[][] map으로 if (arr[i][k] && arr[k][j]) arr[i][j] = true;
    - 이걸로 map[i][j]랑 map[j][i] 체크해서 둘다 false면 서로 못가는 곳임

- A -> B -> C -> D
  B -> D -> E
    - 이런 그래프 문제 많은듯
        - DP 최장수열 문제, DFS 문제, 플로이드와샬 등...

- 특정 배열에 값들을 넣을 때, 중복없이 넣는 방법
    if( ArrayList.indexOf(value) < 0 )
        Arraylist.add(value);

- HashMap에서 put한 상태로 순서 뽑고 싶으면 LinkedHashMap을 사용해라
    - HashMap에서 keySet() 뽑은 다음에 다시 key로 get해야하는 경우에는
    - entrySet() 사용하는게 더 유리 그냥 key만 뽑는거면 keySet 아니면 entrySet써라

- BFS문제에서 visit배열을 여러 개로 분리해야하는 경우도 있다!
    - 특정 조건을 만족한 상태에서의 visit과 만족안할때의 visit이 따로 존재할수도 있음

- 이분 탐색 문제 접근법 (최소/최대 문제를 결정문제로 바꾸기)
    - 완전탐색을 하기에는 숫자 범위가 너무 클때 의심해봐라!!
    ex) 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 구해라
        -> 필요한 시간의 범위를 설정하면, 어느 특정 지점에서 FFF(T)TT가 성립
        -> 나올수 있는 시간의 범위를 low, high에 저장
        -> mid = (low+high)/2로 mid 시간일 때 M명 이상 심사 가능한지 체크
        -> 만약 가능하면 high = mid-1;
        -> 불가능하면 low = mid+1;
    ex) C개의 공유기를 N개의 집에 적당히 설치해서, 가장 인접한 두 공유기 사이의 거리를 최대로
        -> 가장 인접한 공유기 사이의 거리가 mid 이상일때 필요한 공유기 갯수
        -> 고정값 : 집
        -> 두 공유기 사이의 거리로 low,high 설정
        -> mid 마다 필요한 공유기 수 구해서 C랑 비교해서 최대 mid 구하기!
    ex) M개의 휴게소를 설치했을 때, 휴게소가 없는 구간의 길이의 최댓값의 최솟값
        -> 휴게소가 없는 구간의 최댓값이 mid일때 몇개의 휴게소를 설치해야하냐
        -> 이것을 이분탐색을 통해 휴게소가 M개 필요한 값중 mid의 최솟값을 찾아라!
    ex) 구간의 점수(해당 구간내 최대 최소 차이)의 최댓값의 최솟값을 구해라
        -> left~right (mid)에 값을 가능한 모든 구간의 점수의 최댓값으로
        -> 즉, left가 0이고 right이 max값일때
        -> mid 값 조정해가면서 만약 그때 필요한 M개의 갯수가 조건에 맞는지에 따라 mid 값 조정
    ex) DFS를 돌릴려는데 너무 경우의 수가 많은 경우에 결정문제로 바꿔보기 (아이디어 배우기)
        -> 문제가 어떤 거에 대한 최소/최대 값을 물을 경우
        -> 최소/최대의 결과로 나올 수 있는 수의 범위에 대해 이분탐색을 적용
        -> 이분 탐색으로 돌면서 해당 값이 최소/최대가 될 수 있는 지 체크!!!
    ex) 문제를 함수형태로 만들어서 이분 탐색 적용 가능
        ->

- 이분탐색 문제
   - Parametric Search
      - 최적화문제 (f(i) = 1이 되는 i의 최소값을 구해라) => 결정문제 (어떤 i에서, f(i) = 1인가 ?)
   - 예를들어 조건을 만족하는 경우중에 최솟값을 찾는 문제 (최댓값의 최솟값찾기)
      - mid 증가 -> cnt 감소
      - if(cnt > M) -> cnt 감소시켜야하니 mid ++
      - if(cnt < M) -> cnt를 증가시켜야 되니 mid --
      -** if(cnt == M) -> 현재 mid보다 큰값은 볼 필요 x, mid-- (조건 만족할때 최솟값을 찾아야하기때문)

- 이분 탐색 사용 예시
    1. 일치하는 값의 index 찾기
    2. Lower Bound : 찾으려는 값보다 크거나 같은 값이 처음 나오는 위치!
    3. Upper Bound : 찾으려는 값을 초과하는 값이 처음 나오는 위치!
    - 코드는 prac_zone/binarySearch !!
    - 최적화 문제 경우의 수 4가지
        - FFFTTT - Lower Bound;
        - FFFTTT - Upper Bound;
        - TTTFFF - Lower Bound;
        - TTTFFF - Upper Bound;

- 이분 탐색시 실수 모음
    - left는 나올수 있는 최소정답보다 1 작은 값, right은 나올 수 있는 최대정답보다 1 큰 값
    - 오버 플로우 조심!
    - 결정 문제는 Check 함수를 잘 구현해야함

- Floyd 알고리즘 정리
    - 먼저 인접 행렬 2차원 배열 초기화 : 아무곳도 안거치고 직접 갈수 있는 곳은 값 넣고 없는 곳은 무한 넣기
        - i에서 i가는 곳 0으로 초기화 안하면 값 이상함!!! (조심)
        - 인접행렬에 값들 Integer.MAX_VALUE로 채우면 오버플로우 생김 -> 적당히 높은 값 설정
    - (X에서 Y로 가는 비용) vs (X에서 k노드 + k노드에서 Y로 가는 비용)
      (map[i][j] = Math.min(map[i][j], map[i][k] + map[k][j]);)
    - 이런 식으로 모든 특정 노드를 거쳐가는 길에 대해서 계산한다.
    - 시간 복잡도 O(N^3)
    - 인접 행렬에서 Floyd 구현방법
    // k = 거쳐가는 특정 노드
    for(int k = 0 ; k < N ; k++) {
        // i = 출발 노드
        for (int i = 0; i < N; i++) {
            // j = 도착 노드
            for (int j = 0; j < N; j++) {
                map[i][j] = Math.min(map[i][j], map[i][k] + map[k][j]);
            }
        }
    }

- Dijkstra 알고리즘 정리
    - O(ElogV) / 정점마다 적용시키면 O(VElogV)
    - 각 노드마다 거리 정보는 인접 리스트로 초기화 : ArrayList<int[]>[] map
    - dist[] : 거리 정보 저장하는 배열로 Integer.MAX_VALUE로 초기화
    - visit[] : 방문 유무 저장하는 배열로 false로 초기화
    - 음수 가중치 x
    - 다익스트라 알고리즘 구현
        - 먼저 거리를 오름차순 정렬하는 PriorityQueue pq초기화
        - dist[start] = 0 넣고 pq에 int[] {start,0} 넣기
        - pq에서 꺼내는 지점 visit확인하고 간곳이면 continue, 안간곳이면 visit = true로 바꾸기
        - 꺼낸 지점에서부터 갈수 있는 곳 map으로 돌리기
             if( dist[next[0]] > dist[now[0]] + next[1] ){
                dist[next[0]] = dist[now[0]] + next[1];
                pq.add(new int[] {next[0],dist[next[0]]});
             }

- BellmanFord 알고리즘 정리 (다익스트라 음수버전)
    - 한 노드에서 다른 모든 노드
    - 매번 모든 간선을 전부 확인
    - 가중치가 음수가 포함될 때
    - 다익스트라도 음수 포함되면 찾을 수는 있지만 만약 음수 간선의 순환이 포함되면 못찾음
    - 하지만 벨만 포드는 음수 간선이 포함된 상황에서도 사용가능 하고 감지도 가능
    - 하지만 다익스트라보다는 느림 : O(VE)
        1. 출발 노드 설정
        2. 최단 거리 테이블 초기화
        3. N-1 번 반복
            - 전체 간선 E개 확인
            - 각 간선을 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신
        4. 음수 간선 순환 체크하고싶다면 3번의 과정을 한번 더 수행
            - 이때 갱신된다면 음수 간선이 존재하는 것

- 그래프 사이클 생기는지 확인하는 문제
    - 인접 행렬로 표현해서 다익스트라나 플로이드 와샬을 적용했을 때,
    - map[i][j]랑 map[j][i] 모두 값이 존재하는 경우 사이클이 발생한것 !
    - 그 사이클의 길이는 map[j][i]+map[i][j]임!

- DFS,BFS 문제를 백트래킹으로 풀때 고민해야할 거 (아이디어)
    1. 모든 백트래킹 상황마다 DFS, BFS를 적용하게 되면 중복이 생긴다
        -> 미리 초기화상태에서 DFS, BFS를 적용하여 값을 기억하고 있게하고 백트래킹 상황마다 그 값들을 활용하면서 풀기 (DP 아이디어)

- 투포인터 문제 유형
    - 배열 양쪽 끝을 2개의 포인터 지점으로 잡고 점점 좁혀오는 경우
    - 배열의 시작점에 2개의 포인터 지점으로 잡고 사이즈 자유롭게 조정하면서 배열 끝까지 가는 경우
    - 슬라이딩 윈도우 경우

- 다익스트라에서 처음 map 구성할때, ArrayList에 어떤 순으로 저장되는지도 생각하기
    - 만약 ArrayList가 오름차순 되어 있다면, 오름차순으로 PQ에 저장되기 때문에
    - 가장 먼저 도착지에 도착한 루트가 사전순으로 제일 앞인루트
    - 즉, 2차원 map을 정렬을 사용해서 edge를 정렬하면 다익스트라를 사전순으로 접근 가능!

- ArrayList를 clone하면 ArrayList에 저장되어 있는 객체의 주소값을 복사하는거라
    - 값 바꾸면 다 같이 변경된다 (조심!)

- 배열 for 문으로 구간 나누기
    - i로 배열 돌면서 하나씩 체크하기
    - 만약 현재 i 에서 구간에 대한 조건이 실패하면 i-1이 해당 구간의 끝이고 i부터 새로운 구간

- 좌표 나오는 문제에서 좌표를 표시하는 방법
    - 좌표하나하나 boolean으로 구현하는 문제일 가능성은 굉장히 낮음 <- 비효율
    - ArrayList[]로 인접리스트로 표현하기 -> arr[y].add(x) 이런 식으로 나타내고 x 정렬해야함
    - x 좌표에만 표시한 좌표를 tree로 바꾸는 문제 <- PriorityQueue 사용

- dp는 i번째 답을 구하기 위해서는 이전 번째의 답을 활용해서 해결하는 것
    즉, 재귀적으로 문제를 생각하여 불필요한 계산을 줄이는 것이 핵심 !!
    - 현재 상태를 나타내기 이해 필요한 최소의 정보만 기억하는 것이 중요 !
        ex) 한번에 1개 or 2개 계단오를 수 있다, 계단 오르는 경우의 수는? (단 연속 세 개의 계단 불가능)
            -> 현재 i개의 계단을 올랐고, 현재 연속해서 j개를 밟은 상황이다 (j=0,1,2)
    - 트리 문제에서는 자식들의 서브트리에서의 문제를 작은 문제로

- 편집 거리 알고리즘 (dp 사용)
    - A 문자열로 B 문자열로 만드는데(추가,삭제,변환) 걸리는 최소 거리
    - DP[i][j] = A[1...i]와 B[1...j] 사이의 편집 거리
    - for(i : 1~n){for(j : 1~m){...}}
    - if(i == 0 or j == 0) dp[i][j] = Math.max(i,j);
    - if(A[i] == B[j]) dp[i][j] = dp[i-1][j-1];
    - else dp[i][j] = Math.min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1;
    - 그럼 dp[n][m] 값이 정답임
    - 간단히 생각해보면 i번째 문자랑 j번째 문자가 같으면, i-1,j-1의 편집 거리랑 동일하고
        i,j번째 문자가 다르면, (i-1)->(j-1)에서 변환, (i)->(j-1)에서 추가, (i-1)->(j)에서 삭제중 하나라고 생각

- LCS (최장 공통 부분 수열)
    - 두 수열 A,B에서 모두의 부분 수열중 가장 긴것 찾기
    - DP[i][j] : A[1...i]와 B[1...j]의 LCS 길이
    - if(i == 0 or j == 0) dp[i][j] = 0
    - if(A[i] == B[j]) dp[i][j] = dp[i-1][j-1]+1; // A[i], B[j] 모두 LCS에 포함되는 경우
    - else dp[i][j] = Math.max(dp[i][j-1],dp[i-1][j]); // 둘
    - 만약 최장 공통 부분집합을 찾는다면, 즉 다 이어져 있는 값만 찾는다면
        A[i]랑 B[j]가 같지 않으면 dp[i][j] = 0을 초기화해주는것과 답이 dp 값들 중에 최고값인것 (??)

- LIS (최장 증가 부분 수열) (dp 사용)
    - 하나의 수열에서 증가 부분 수열중 가장 긴 것 찾기
    - dp[i]는 마지막으로 뽑은 수가 Ai일때 가장 긴 부분 수열의 길이
    - 앞에 확인한 숫자들 중에, Ai보다 작은 숫자들의 dp[j]+1 중 최댓값을 dp[i]에 넣는다 (이 방식은 O(n^2))
    - 이분탐색 lowerBound를 사용해서 O(nlogn) 가능

- BFS 돌릴때 동시에 현재 큐에 있는 모든것이 동작하게하고 또 다음 큐에 있는 것들 동시에 실행시키기
    - while(!q.isEmpty()){
        int size = q.size();
        for (int s = 0; s < size; s++) {
            int[] now = q.poll();
            ...
        }
    }
    - 이런 식으로 현재 큐에 들어 있는 데이터 갯수만큼 실행시키기 !!

- "정렬되어 있는" 중복 x 배열에서 원하는 값 찾을때
    Arrays.binarySearch 사용하기 !!!

- 다익스트라에서 길의 가중치가 아닌 길을 지나는 물품의 중량 제한이 있는 상황일 때, 한번에 이동시킬 수 있는 중량 최댓값 구하는 문제
    - PriorityQueue : 중량 높은 길이 우선이기 때문에 내림차순으로 정렬
    - dist : 처음 0으로 초기화, pq.add(new int[] {start,1_000_000_001});
            저장되는 값은 해당 idx에 갈때 최대 무게
    - dist[next[0]] = Math.min(dist[now[0]],next[1])
    - visit : 방문 배열

- 우선순위큐에서 람다식 안쓰고 implements Comparable<Object> 쓰는 방법
    - public int compareTo(Object o)를 Override 하면된다
    - this.time - o.time이 오름차순 !

- DFS/BFS 문제에서 visit 처리시
    - 만약 여러가지 경우에 따라 visit을 나눠야하는 경우 visit을 3차원 배열로 두기
    - [더 좋은 방법] 각 경우를 cost로 치환할 수 있는 경우, int check를 둔다
        - 그리고 현재 상황에 check보다 cost가 큰 경우에만 q.add 처리 해주기로 문제해결 가능!!

- DP 점화식
    - 부분의 문제가 해결됐다고 가정하고, 점화식을 떠올려 보는 것
    - 예를들어 D[i][j]가 i~j 구간의 행렬을 합치는 데 드는 최소 연산 횟수이라고 가정하자
        - D[i][j] = D[i][j-1]+D[j][j]+a : 1개의 행렬로 합치는 데 드는 횟수
    - dp/BOJ_11049 참고 !!

- 투포인터 + DP 문제
    - dp/BOJ_20181 문제 연습!
    - 투포인터로 left랑 right 안의 값들을 조절하면서
    - 상황에 따라 left++, right++ 하면서 값들을 DP에 저장

- 투포인터 문제
    - 언제 right--, left++ 할지 명확하게 잡고 구현하기
    - 조건 맞을때는 right--이냐? left++이냐 ??

- 플로이드와샬 (O(N^3))
    - 원리 그림그려서 이해하기
    - 이 코드는 i에서 j로의 경로를 찾기 위해
    - i에서 k로의 최단거리 + k에서 j로의 최단거리를 찾는 것임
    - => 이해를 바탕으로 푸는 문제 : 모든 경로에서 제일 처음 들리는 node를 출력해라
    - => i에서 j경로일때 node는 i에서 k경로일때 들리는 node와 똑같다
    ```
    for(int k = 0 ; k < N ; k++) {
       for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if(i == j) continue;
                if (map[i][j] > map[i][k] + map[k][j]) {
                    map[i][j] = map[i][k] + map[k][j];
                    next[i][j] = next[i][k];
                }
            }
        }
    }
    ```

- 위상정렬 Tip
    - 진입차수 0인것 큐에 넣고, 큐에서 하나씩 꺼내서 해당 노드로부터 갈수 있는 진입차수 마이너스후에 또 진입차수 0인거 있으면 큐에 넣기 반복
    - 만약 마음대로 방문하는것이 아니고 진입차수 0일때도 순서대로 들어가고싶으면 우선순위큐 쓰면 될듯?
    - 만약 모든 노드를 돌기 전에 큐가 끝나면 사이클이 발생한 것
    - 모든 정점에 대해서 간선의 갯수만큼 확인하기 때문에 O(V+E)의 시간복잡도를 가진다.
    - 즉, 사이클 체크는 위상정렬 or 플로이드와샬 / 음의 사이클은 벨만포드

- dfs를 map의 영역별로 들어가는 경우도 있다

- 메모리 사용량
    128MB라면 int 배열 대충 33_554_432개 까지 사용가능하다!!

- 다익스트라는 X 위치에서 다른 위치로 가는 최단 거리를 구하는 알고리즘이다
     - 여기서 map의 방향을 모두 반대로 바꾸고 X 위치에서 다른 위치로 가는 최단 거리를 구해서 나온
        dist 배열은 다른 위치에서 X위치로 가는 최단거리 인것이다!
     - 즉, 다른 위치에서 X로 가는 최단 거리를 구할 때, 굳이 다른 모든 위치에서 다익스트라 돌릴필요 없이
        그냥 map 방향만 바꾸고 X 기준으로 다익스트라 돌리면 된다!

- map에서 특정 방향으로 X칸씩 움직이는 상황에
    X칸 이동과 X%Y칸 이동이 같은 경우가 있음 -> 시간 단축

- 구현 문제에서 HashMap에다가 특정 객체 저장해두고 map에다가는 key 값만 저장해두기

- 배열의 부분합을 구하는 방식은 누적합을 활용해라
    - int[] prefixRArr = new int[rArr.size()+1];
      for(int i = 0 ; i < rArr.size() ; i++){
        prefixRArr[i+1] = prefixRArr[i]+rArr.get(i);
      }
    - prefixRArr[i+1]의 의미는 rArr의 idx 0 ~ i 까지 합
    - rArr의 i~j 합은 prefixRArr[j+1]-prefixRArr[i];
    - (i~j 합) = (0~j 합) - (0~i-1 합);

- 투포인터 사용할 때, 같을 때 어떻게 설정하는지가 중요!
    - 여기서 만약 여러 갈래로 나뉘는거면 bfs,dfs 사용 (이때 상황 중복될 수 있으니 조심)
    - ex) i,j -> i-1,j -> i-1,j-1
              -> i,j-1 -> i-1,j-1
          // 겹치는 상황나오면 dp 생각

- 최솟값, 최댓값 구하는 문제 이분탐색 의심
    - 하지만 그게 아닐 수도있다!
    - 상황을 보고 합의 최솟값 이러한 상황에 그리디로 풀릴 수있음

- 여러 사건에 대해 시작 시간과 끝나는 시간이 주어지고 특정시간에 가장 많은 사건이 동시에 발생시
    - 최대값을 구하는 문제는 그리디로 우선순위큐를 사용해라
    - (시작 시간, true) (끝나는 시간, false)를 큐에 넣어라
    - 그리고 우선순위 큐 시간 순으로 하나씩 빼면서 true면 ++, false면 --로 최댓값 구하기 !

- dfs 조합 연습하기
    1. 기본 조합 : 배열 or ArrayList에서 N개 중에 M개 고르기
        DFS(idx, cnt) 형태

    - 값들의 의미
        goal : 총 선택 갯수
        count : 조합에서 지금까지 선택한 애들의 갯수
                이번 depth에서는 선택한 애들을 저장하는 배열 select[count]에 저장
        idx : 이번 depth에서는 idx에서부터 N까지 선택하겠다.
        select : 선택한 애들을 저장하는 배열 int[] select = new int[goal]

    - **조합 문제 구조 바꾸기
        만약 map[i][j]에서 여러 개의 (i,j)중에 goal개를 선택해야 하는 상황이라 가정
        - map을 돌면서 선택 후보들 ArrayList cand에 값 넣기
        - 여기서 N은 ArrayList.size()가 되는거
        - select라는 선택된 애들을 저장하는 배열 하나 만들기
        - DFS로 돌면서 select[count]에 값 저장
        - count == goal이 되는 시점에 문제에 맞는 추가적인 로직 적용하기

    2. map의 모든 좌표에서 시작으로 거리 4까지 있는 모든 값들의 합 구하기?
        - 이런것도 조합임

    3. 선택된 여러명이 각자 4방향으로 움직이는 상황
        - 선택하는 숫자가 작으면 그냥 반복문으로 돌리면 됨
        - 하지만 많으면 combi로 선택해야할 듯?

    응용 : 1의 상황처럼 N명의 후보중에 M 명을 선택한다
        그리고 선택한 M명이 각자 독립적으로 움직인다.
        이때 3번을 써야함

- 크루스칼 알고리즘 : 최소 신장 트리구할 때 쓰는 알고리즘
    - 즉, 가장 적은 비용으로 모든 노드를 연결하기 위한 알고리즘
    - 여러 개의 도시가 존재할 때, 각 도시를 최소 비용 도로로 연결하고자할때
    - (간선 숫자) = (노드 숫자) - 1
    - 유니온 파인드를 사용하면 된다
    - [풀이]
        1. 먼저 모든 간선(from,to,value)을 value 기준으로 오름차순으로 정렬한다.
        2. Parents[i] = i 로 초기화
        3. 간선만큼 for문을 돈다. 만약 find(from) != find(to)이면 현재 연결안되어 있기때문에 연결해준다
        4. 연결은 union(from,to)로 연결하고 비용합에 value를 더한다
        5. 만약 find했을 때 이미 연결되어 있는경우라면 그냥 continue;

- 프림 알고리즘 : 다익이랑 비슷
    - 이건 dist 따로 필요없고 visit배열이랑 우선순위큐만 있으면 됨
    - 우선순위 큐에는 new int[]{to,value}만 저장한다
    - 즉, 지금까지 마주친 간선중에 항상 최소 길이의 간선을 선택하는 방법임
    - 이미 방문한 노드로 가는 간선은 conitnue로 넘어간다.
    - 그렇지 않은 간선에 대해서는 해당 간선을 통해 노드로 이동한다

- 그리디 문제 유형 다 넣어놓자
    - 배열이 주어졌을때, 순서대로 앞에서부터 처리 (여분을 가진 사람이 앞뒤로 나누어주는 문제)
    - 문자열에서 curser 이동문제 : 오쭉, 오른->왼, 왼->오른, 왼쭉 다고려
    - 주어진 수에서 k자리만큼 없앨때 최대값 구하기
        - 범위내에서 최대값 선택해서 n-k 자리 숫자 만들기
    - 정렬후 투포인터 양방향에
    - 크루스칼, 프림 적용 문제
    - 주어진 배열 정렬하고 순서대로 값 비교하면서 문제 해결하기
    - k개의 센서를 n개의 마을에 설치하는 문제에서 센서간의 거리중 최댓값의 최솟값구하기
        - 마을간의 거리를 정렬하고 큰 곳부터 양쪽 설치?
    - 우선순위큐로 최솟값 두개 뽑아서 더해서 다시 넣기
    - 특정 영역이 겹칠때, 가장 최장으로 겹치는 값 구하는 문제
        - 우선순위큐에 영역 in일때 out일때 넣어서 in할때마다 answer 비교
    - 문자열 뒤집기 + 그리디 : 새로 들어온 문자가 기존 문자의 마지막보다 크면 앞에다 붙이기
        - 즉, 직접 문자를 계속 뒤집을 필요없이 새로운 문자를 앞에다 붙일지 뒤에 붙일지 결정하면 됨
    - 좌표 map에서 in/out 범위 문제
        - 우선순위큐에 in,out 변수가진 객체넣고 정렬후, 차근차근 계산
    - O(N) or O(NlogN) 으로만 해결해야할 때, (전체 상황)-(아닌 상황) 으로 풀이하는 아이디어!
    - 주어진 숫자에서 K개 삭제했을 때, 최댓값 구하기
        - Stack에 넣기전에 peek값이 더 작으면 pop 해주고 넣기
        - 최대 K번까지 pop 가능하다
        - 접근법 : 주어진 숫자에서 내림차순서로 만들기를 stack을 활용해서 함

- 그리디 실수 모음집 : 그리디는 놓치는 부분이 치명적일때가 많다!!
    - 내가 구매한 고기보다 저렴한 고기는 덤으로 받을 수 있다
        = 최댓값만 구하는 게 아닌, 최댓값이 중복으로 여러 개 일수 있따는 것을 고려해라
    - 최댓값으로 여러 개 사는 것보다 그것보다 더 비싼 것을 더 작게 사는게 이득일 수 있다



- 좌표 map 문제
    - 좌표 관련 문제는 좌표를 배열로 어떻게 표시하는지가 중요하다
    - 1. 좌표만 배열로 표시
      2. 공간을 배열로 표시
      3. 크기 2배로 늘려서 좌표랑 공간 모두 표시하기 (*)

- DP 배열 정의하기 예시
    - 연산의 최댓값 구하는 문제에서 dp[i][j][2]로 둔다
        dp[i][j][2] : i~j의 값들을 연산했을 때, [0]에는 최솟값 저장, [1]에는 최댓값 저장

- dfs/bfs 에서 visit 두는 방식
    - 출발지 or 목적지 or 간선
    - 문제마다 다르니 조심!!

- dfs의 시간복잡도 계산하기 (N : 정점, E : 간선)
    - 인접행렬(n*n)
        - 완전 탐색 시 : O(N!) -> N이 12일때 약 4~5초, 11까진 괜찮
    - 인접리스트(Arr[])

- 외판원 순회 문제 (DP + 비트마스크)
    - 비트마스크를 통해 방문한 도시를 표현할 수 있음
    - **출발 도시가 달라져도, 경로가 같으면 최소 비용이 같음
    - dp[cur][visit]
        - cur : 현재 위치한 도시
        - visit : 지금까지 방문한 도시 집합 (비트마스크)
        - dp[cur][visit] : 방문하지 않은 나머지 도시 모두 방문한 뒤, 출발 도시로 돌아갔을 때, 최소 비용
    - 정리하면 TSP(외판원 순회)는 최단 순환 경로를 탐색해야하는데
           1) N! 의 중복 경로를 제거해주는 DP 메모제이션 기법을 사용한다.
             그래도 2^N의 모든 경우의 수를 표현해야 하기 때문에 그만큼의 공간복잡도가 필요하다.
           2) 메모리 사용량도 줄이고 성능 향상을 위해서 2^N의 경우의 수를 Nbit로
             표현할 수 있는 비트마스킹으로 사용한다.
    - DP/BOJ_2098

- StringBuilder 메소드
    - sb.charAt(0);
    - sb.deleteCharAt(0);
    - sb.replace(0,1,"zzzz");
    - sb.insert(0,"ddd");
    - sb.reverse();
    - sb.append("Dd");
    등등...

 - 만약 나온 상황이 1 1 1 2 2 3 3 3 이렇게 중복이 발생하는 상황에서 현재 값보다 작은 경우까지만 계산해야할 때
    - 이런 식으로 이전idx 따로 두고 이전idx 기준으로만 값 계산하기 (??)
    int ball_idx = 0;
    int sum = 0;
    for(int i = 0; i < n; i++) {
        Ball current = balls[i];
        while(balls[ball_idx].size < current.size) {
            sum += balls[ball_idx].size;
            colors[balls[ball_idx].color] += balls[ball_idx].size;
            ball_idx++;
        }
        result[current.idx] = sum - colors[current.color];
    }

- 어려운 dp문제 점화식 찾는 꿀팁!!
    1. 먼저 상황 변수를 모두 찾는다!!
    2. 그리고 그 상황 변수를 어떻게 표현할건지 고민!
        - 이게 중요!! 최대한 dp배열의 차원을 줄이는 게 실력인듯
        - for문으로 해당 배열에 로직 여러번 적용함으로써 줄일 수도 있음 !
        - 만약 상황 변수가 너무 많으면 재귀로 해결해라
        - dp 배열 범위가 너무 큰 경우는 정의를 잘못했을 확률이 높다
    3. 그 표현방법으로 dp배열을 정의하고 점화식 찾기

- map dp에서 map 사이즈만큼 dp를 만드는 문제도 있지만
    - 순서에 따라 갈수있는 영역(상하좌우 - 4)이 정해진 경우는
    - dp[order][4] 이렇게 세울수 있다.

- 경로가 굉장히 복잡하게 주어질 경우 dp 의심
    - 현재위치로 올 수 있는 이전 도시로부터 위치 다 확인하기
    - 이때 어떤 도시에 몇번만에 갔는지, cost 얼마인지 알아야하는 경우
    - dp[도시][몇번째] = (최대 cost)
    - dp[next][i] = Math.max(dp[next][i], dp[now][i-1] + cost);
    - 간선 정렬후, 간선하나씩 적용해보기 !!

- 배열돌리기
    - map[i][j] 값을 [a][b]를 중심으로
        - 시계 방향으로 90도 : map[-j+(a+b)][i-(a-b)] = map[i][j];
        - 반시계 방향으로 90도 : map[i+(a-b)][-j+(a+b)] = map[i][j];
    - 배열 특정 줄 기준으로 뒤집기는 그 줄값*2 한것이 양쪽 합인것을 기억해라 !

- 그리디 문제는 보는 관점에 따라 풀이가 달라진다!!
    - 예를들어 도시들과 경로가 주어지는 문제면, 경로를 어떤 식으로 볼지 중요
    - 경로 : 먼저 방문하는 것을 기준으로 정렬할지, 먼저 도착하는 지점을 중심으로 정렬할지
        -> 보통 먼저 도착하는 순이긴 함
        - 경로를 앞에서 부터 돌면서 최대한 양을 옮기는 것

- dfs,bfs 문제에서 현재 상황 map에서 계속 새로운 map이 여러갈래로 생길 때,
    - map을 창의적으로 두는 방법도 생각하자
    - 3*3 퍼즐문제에서 String으로 값을 123456789로 두는 방법
    - 그리고 어떤 상황이 생길지 예상이 안되는 상황이면, HashMap으로 모든 상황 스냅샷 찍어두기
        - 만약 처음본 스냅샷이면 큐에 넣고, 아니면 패스
