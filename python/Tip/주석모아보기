
- max(), min()으로 리스트 또는 변수사이의 값 비교가 가능
    전체 리스트의 입장에서 문제 바라보기뿐만 아니라
    리스트의 원소 입장에서 문자 바라보기

- 백트래킹 원리 : 재귀 들어가기전 적용하고 재귀 나와서 취소하기

- ord(A) == 65 : 문자 -> 정수
- chr(65) == 'A' : 정수 -> 문자

- python으로 dfs 문제 풀때 recursionlimit 설정 필수!
    sys.setrecursionlimit(10000)

- bfs로 완전 탐색을한 후, visted에 의미 있는 값을 저장
    bfs : 어차피 q로 한 바퀴 쏵 돌아야하니깐
        큐를 사용해서 우선순위를 가질 문제에 대해서는(즉 시간에 영향이 없는 것들)에 대해서
        appendleft를 통해 왼쪽에 넣어야 함  
        bfs에서는 도착하면 그게 최단 시간임
        

- 문자열 다루기
    문자열 합치기 join 함수 정리
    ''.join(리스트)

- 아이디어 배우기
from itertools import combinations

for i in range(1, 11):
    for j in combinations([9,8,7,6,5,4,3,2,1,0], i):
        num = ''.join(map(str, j))
        result.append(int(num))

- Python으로 완전탐색을 풀어야 할 경우 범위가 매우 작으면 DFS로 풀이하되 범위가 크다면
    다이나믹 프로그래밍으로 풀어야 한다!!
    BFS로 풀면 시간초과 발생

- 구현 문제 꿀팁
    탐색해야할 전체 데이터의 갯수가 100만개 이하일 때 완전 탐색을 사용하면 적절하다

- 구현 문제 잘푸는 팁
    바로 코딩 들어가지말고 어느 정도 도식화한 다음 들어가기

- 디버깅은 툴을 쓸수없으니 직접 출력해보면서 하면 됨