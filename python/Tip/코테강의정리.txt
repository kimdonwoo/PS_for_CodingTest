- 코테 문제는
    1. 문제 이해하기
    2. 접근 방법
    3. 코드 설계
    4. 코드 implement
 이 순서대로 문제 푼다!!!


[접근 방법] <= 가장 어려워 하는 부분

    1. 직관적으로 생각하기 (양치기가 답인듯..?) 
        - 보통 완전 탐색으로 시작
        - 문제 상황을 단순화하여 생각
        - 문제 상황을 극한화하여 생각

    2. 자료구조와 알고리즘 활용
        - 문제 이해로부터 파악한 내용을 토대로 어떤 자료구조 사용할지 결정
        - 대놓고 특정 자료구조, 알고리즘 묻는 문제 많음
        - 자료구조에 따라 선택할 수 있는 알고리즘을 문제에 적용

    3. 메모리 사용
        - 시간 복잡도를 줄이기 위해 메모리를 사용하는 방법
        - 대표적으로 해시 테이블


[Dynamic Array] <= python의 list가 이걸 기반으로 구현됨

    - 선언 및 초기화 : O(n)
    - 접근 및 삽입, 데이터 추가 : O(1)
    - 리사이징 : O(n)
    - 마지막 데이터 삭제 : O(1)
    - 중간에 데이터 insert,delete : O(n)  <--한칸씩 뒤,앞로 밀어야 해서


Sort의 시간복잡도 : O(nlogn)  <= 외워두기
Two Pointer : 보통 정렬된 상황에서 쓰임


[연결 리스트] - Linked list (DBH_clone.py)

    - Node라는 구조체가 연결되는 형식으로 Node에 데이터 값, next node 주소값 저장 
    - 노드(value,next)를 구현하는게 중요
    
    class Node :
        def __init__(self, value=0, next=None):
            self.value = value
            self.next = next
    
    class LinkedList(object):
        def __init__(self):
            self.head = None
        def append(self,value): <== 시간 복잡도 : O(n) , tail 구현하면 O(1) 가능
            new_node = Node(value)
            if self.head is None:
                self.head = new_node
            # 맨 뒤의 node가 new_node를 가리켜야 한다
            else:
                current=self.head
                while(current.next):
                    current = current.next
                current.next = new_node
        def get(self,idx)  <== 시간 복잡도 : O(n)
            current=self.head
            for _ in range(idx):
                current = current.next
            return current.value
        
    class LinkedList(object):
        def __init__(self):
            self.head = None
            self.tail = None 
        def append(self,value): <== 시간 복잡도 : O(1)
            new_node = Node(value)
            if self.head is None:
                self.head = new_node
                self.tail = new_node
            # 맨 뒤의 node가 new_node를 가리켜야 한다
            else:
                self.tail.next = new_node
                self.tail = self.tail.next

    [Linked list 코테 적용 방법]
    - 선형 자료 구조 + 중간에 데이터 추가/삭제 용이
    - Tree or Graph 활용

[큐] : 즉 파이썬에서는 deque 사용 !!!! + append, popleft
    - Array list로 구현하면 큐의 장점이 없어짐 (리스트로 큐 implement x)
        -> pop(0) 사용시, 없애고 남은 데이터를 앞으로 다 옮겨주기 때문에 O(n)이 됨...  
    - 시간 복잡도를 위해 Linked list로 implement (이게 deque)
        -> enqueue(), dequeue() 둘다 O(1)로 해결 가능!!    // append랑 popleft임!
    - 선입 선출 (FIFO)
    - dequeue() : front에서 꺼내기 , enqueue() : rear에 넣기
    - from collections import deque

[스택] : 즉 파이썬에서는 list 사용 !!!! + append, pop
    - 그냥 Array list (Python의 리스트)로 사용하면 됨!
    - 중요한건 후입선출(LIFO)을 코테에 적용하는 방식!!   // append랑 pop
    - DFS(깊이 우선 탐색)에도 사용!!
    - 사용 예시 문제 : 괄호 유효성 문제, 온도 측정 문제 
        특정 조건이 만족할때만 반응을하는 문제들(pop)
            
        ex) 온도 측정 문제
            스택 내부가 내림차순 유지?

튜플로 리스트 다루기 연습해보자

[딕셔너리]
    - 해시 테이블로 implement
    - 효율적인 탐색을 위한 자료구조로 key-value 쌍의 데이터
    - 사용 방법
        score = {
            'math':97,
            'eng':97,
            'kor':89
        }
        score['sci] = 100
        ***if 'sci' in score : # 이런식으로 조건문 가능 (이게 핵심!!!!!!!!) -> 만약 dict에 해당 key값이 있다면?
            key 값쓰고 in 쓰고 뒤에 dict 쓰기 -> O(1) 혁신!

    - 메모리를 사용해서 시간복잡도를 줄이는 것!!
    - for x in dict랑 if x in dict랑 다름!
    - longestConsecutive 문제 5번 풀어라!
    - num_dict = {x:True for x in num}

[재귀]
    - 자신을 정의할 때 자기 자신을 재참조하는 함수
    - 구성 요소 2가지
        1. 점화식 : f(n) = n * f(n-1)
        2. base case : 재귀 호출을 하지 않아도 계산값을 반환할 수 있는 상황 (무한루프 방지)
    - 시간 복잡도 : 재귀함수 호출 수 * (재귀 함수 하나당) 시간 복잡도
        - f(n) = n*f(n-1)  => O(n)
        - f(n) = f(n-1) + f(n-2) => O(2^n)
        - Binary Search => O(logn)

[Tree]
    - Tree는 서로 연결된 Node의 계층형 자료구조로써, root와 부모-자식 관계의 subtree로 구성
    - 용어 정리
        1. 간선(edge) : 연결된 선
        2. 차수(degree) : 각 노드가 갖는 자식의 수
        3. 조상 : 위쪽으로 간선을 따라가면 만나는 모든 노드
        4. 자손 : 조상 반대
        5. 높이 : 루트 노드에서 가장 멀리있는 리프 노드까지의 거리 (최대 레벨)
        6. 레벨 : 루트 노드(레벨 0)에서 떨어진 거리
        7. 서브트리 : 트리의 어떤 노드를 루트로 하고, 그 자손으로 구성된 트리를 subtree라고 함
    
    - [Binary Tree]
        - Node
            Value, LC, RC를 가짐
            class Node :
                def __init__(self, value =0, left = None, right = None):
                    self.value = value
                    self.left_child = left
                    self.right_child = right
        - Binary Tree
            class BinaryTree :
                def __init__(self):
                    self.root = None
        
    - 트리 순회 (Tree Traversal)
        - 완전 탐색이라고도 불림
        - 순회방법으로 BFS랑 DFS 존재 
            1. bfs.py 참고 <= 10번 반복 필수!
            2. dfs.py 참고 <= 10번 반복 필수!
                - 전위 순회 / 중위 순회 / 후위 순회

    - 코테 적용!! (트리문제면 바로 떠올려라!)
        1. Tree implement
        2. **트리 순회  -> LCA 문제 외우기!!
            level order랑 post order가 제일 자주 나옴!
            post order(후위)는 DFS랑 비슷
                자식 Node들의 결과를 기반으로 방문  
            level order는 BFS랑 거의 비슷한 방법    

[그래프]
    - 그래프 G(V,E)는 어떤 자료나 개념을 표현하는 정점들의 집합 V와 
        이들을 연결하는 간선들의 집합 E로 구성된 자료구조

    - 그래프 종류
        1. 방향 그래프 vs **무향 그래프
        2. 다중 그래프 vs **단순 그래프 
        3. 가중치 그래프 => 다익스트라

    - 그래프 활용
        - 현실 세계의 사물이나 추상적인 개념간의 연결 관계를 표현
        - 그래프는 현실의 문제를 해결하기 위한 도구로써 유용하게 이용됨 => 문제가 많이 나옴
        - ex) 도시들을 연결하는 도로망, 지하철 연결 노선도, 컴퓨터 네트워크, 소셜 네트워크 분석

    - 그래프 표현 방법
        1. 인접리스트 => 주로 이걸 쓸거임
            - Dictionary로 표현 !! , key에 연결된 노드들을 value에 리스트로 저장
        
        2. 인접 행렬 => 거의 쓰지 않음!! (너무 비효율적)
            - 이중 리스트로 i,j 사이의 관계를 list[i][j]에 적어둠
            - 무향 그래프면 대칭 구조로 만들어짐
        
        3. 암시적 그래프 => 얘도 많이 씀!!
            - 미로나 땅을 표현할 때!!
            - 맵 자체를 이중 리스트로 옮겨둠
            - 방문유무 

    - 그래프 순회
        - BFS/DFS 기본 코드 외우기! (그래프_dfs.py , 그래프_bfs.py)
        - 시간 복잡도 : O(V+E)
 
    - 완전 탐색 (BFS) => NumberOfIslands.py 외우기 
    - 최단 거리 => SPiBM.py 외우기 
    - 완전 탐색 (DFS,BFS) => KeysAndRooms.py 외우기

        +all(list) : 해당 list가 다참이면 true


[DP]  -> 문제를 많이 풀어보자!
- 문제에 대한 정답이 될 가능성이 있는 모든 해결책을 "체계적"이고 "효율적"으로 탐색하는 풀이 
    (모든 문제 탐색은 완전 탐색)
- 접근 방법
    먼저 완전 탐색으로 하고 DP로 
    1. 크고 복잡한 문제를 작은 문제들로 나눈다. (subproblem)
    2. 하위 문제의 답을 계산
        중복 계산해야하는 하위 문제가 있다
        한번 계산한 결과는 메모리에 저장하여 재계산 x
    3. 하위 문제에 대한 답을 통해 원래 문제에 대한 답 계산
        최적 부분 구조 : 하위 부분 문제에서 구한 최적의 답이 합쳐진 큰 문제의 최적의 답을 구할 수 있는 구조 

- 예시 : 피보나치 수열 (피보나치_DP.py)

- 총정리
    1. Overlapping subproblem
        - Problem을 작은 subproblem로 분해하고 계산값 재사용
    2. Optimal substructure
        - subproblem의 최적해법으로 원래 문제의 최적 해법을 구할 수 있음
    - 방법
        탑다운 방법 (재귀)
        바텀업 방법 (반복)
            => 메모리로 시간 줄임 
    - 어떻게 DP를 떠올리지??
        완탐에서 하위문제로 나누는게 많음. 그리고 중복계산이 존재하면 계산결과 저장/재활용  

        - 문제 적용 (점화식, base case 필수 !!)
            - 최대, 최소, 방법의 개수 등을 구할 때 DP 많이 활용
                - ~ 최소 비용은 ? - What is the longest possible...
                - ~ 최대 이익은 ? - 특정 지점에 도달할 수 있는지?
                - ~를 하는 방법의 갯수
            - 미래의 계산이 앞선 계산 결과에 영향을 받을 때

    - 탑다운 vs 바텀업
        1. 탑다운
            - 재귀 사용 => implement 시간 빠름 , 실행속도 느림 (오버헤드 문제)
            - 재귀 풀이에서 중복되는 계산값을 저장하여 동일한 함수 호출시에 재활용
            - hashtable 또는 list로 계산결과 저장

        2. 바텀업
            - 반복문 사용 => 실행속도 빠름
            - 더 작은 subproblem에 대한 계산결과를 DP Table에 저장하여 더 큰 문제의 계산에 활용
            - hashtable 또는 list로 계산결과 저장

        결론 : 완탐으로 접근하고 시간복잡도가 너무 높다면 탑다운 -> 바텀업 이런 경우가 많음 


[Priority Queue]
    - 우선순위가 가장 높은 값이 먼저 추출
    - enqueue(), dequeue()
    - 완전이진트리로 구현하면 둘다 O(logn) 가능 -> Heap
    - Heap을 List로 구현하는게 가능하다
        - List의 index가 i일 때, 왼쪽 Child의 index는 2*i+1이고 오른쪽 Child의 index는 2*i+2 이다.
        - 부모 Node의 index는 (i-1)/2 이다.
    - min heap : 부모 노드의 값이 자식 노드의 값보다 작다.
    - max heap : 반대
    - 형제 노드 간에는 대소 관계 정해지지 x
    - Root 노드가 가장 큰(or 작은) 값을 갖는다
    - Heap.py에서 implement

[다익스트라] - 외우기!
    - 가중치가 없다면?? -> BFS
    - 하지만 가중치가 있다면?? -> 다익스트라
    - 완전탐색으로 최단 비용 거리 찾지 않고 다익스트라로 효율적으로 찾는다
    - 방문할 수 있는 노드 중에 가장 비용이 작은 곳 방문 (우선순위가 높은 곳 방문)
        1. 우선순위큐에 시작노드 추가
            2. 우선순위가 가장 높은 노드 추출
            3. 방문여부 확인
                4. 비용 업데이트
                5. 현재 노드와 연결된 노드 우선순위 큐에 추가
        6. 목적지에 기록된 비용 반환
        => 코드는 다익스트라.py 참고!
        => Network Delay Time 문제도 참고!



