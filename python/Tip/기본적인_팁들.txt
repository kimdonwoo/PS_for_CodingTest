
<pass,continue,break 정리>
    
        1. pass : 실행할 코드가 없는 것으로 다음 행동을 계속해서 진행합니다.
        2. continue : 바로 다음 순번의 loop를 수행합니다.
        3. break : 반복문을 멈추고 loop 밖으로 나가도록합니다.
                반복문 단 하나만 빠져 나감. 여러개 x
                flag 하나 사용해서 빠져나가기 가능할듯
    
<파이썬 자료구조>
    
        1. List : 다른 파일에 정리 []
    
        2. tuple : 리스트와 같지만, 데이터 변경 x
            tuple()
    
        3. set : 데이터 중복 허용x , 수학의 집합 연산 지원
            set([1,2,3,1,2,3]) -> {1,2,3} // list를 set으로 바꿈
            set('abbaaab') -> {'a','b'} // 이런것도 가능
            add(n), remove(n), update([4,5]), clear() 등 가능
            
            합집합 : | , 교집합 : & , 차집합 : - , 대칭 차집합 : ^ 연산도 가능
            
        4. dictionary : key-value 형식, 읽기 빠름 {}
            사용 예시 : dic = {number2[i] : i for i in range(len(number2))}
                numbers['kk'] = 1002 이런식으로 추가도 가능
                number.keys() 로 모든 키값을 리스트로 저장 가능 (number.values()도 가능)
                
                [초기화 방법]
                for i in range(1,31): check[i] = 0
                check = {i: 0 for i in range(1, 31)}
    
        5. stack : 나중에 들어온 값이 먼저 나감
            list의 append(i)와 pop()으로 구현 가능
    
        6. queue : 먼저 들어온 값이 먼저 나감
            from collections import deque
            
            q = deque([1,2,3])
            q.append(4)
            q.popleft()
            
            이런 식으로 구현 (BFS)
            deque에서 쓸수 있는 함수들
                appendleft(),append(),popleft(),pop(),remove()
                clear(),insert(),reverse(),count() 등등...

    
    
- max(), min()으로 리스트 또는 변수사이의 값 비교가 가능
    전체 리스트의 입장에서 문제 바라보기뿐만 아니라
    리스트의 원소 입장에서 문자 바라보기

- 백트래킹 원리 : 재귀 들어가기전 적용하고 재귀 나와서 취소하기

- ord(A) == 65 : 문자 -> 정수
- chr(65) == 'A' : 정수 -> 문자

- python으로 dfs 문제 풀때 recursionlimit 설정 필수!
    sys.setrecursionlimit(10000)

- bfs로 완전 탐색을한 후, visted에 의미 있는 값을 저장
    bfs : 어차피 q로 한 바퀴 쏵 돌아야하니깐
        큐를 사용해서 우선순위를 가질 문제에 대해서는(즉 시간에 영향이 없는 것들)에 대해서
        appendleft를 통해 왼쪽에 넣어야 함  
        bfs에서는 도착하면 그게 최단 시간임
        
- 문자열 다루기
    문자열 합치기 join 함수 정리
    ''.join(리스트)

- 아이디어 배우기
from itertools import combinations

for i in range(1, 11):
    for j in combinations([9,8,7,6,5,4,3,2,1,0], i):
        num = ''.join(map(str, j))
        result.append(int(num))

- Python으로 완전탐색을 풀어야 할 경우 범위가 매우 작으면 DFS로 풀이하되 범위가 크다면
    다이나믹 프로그래밍으로 풀어야 한다!!
    BFS로 풀면 시간초과 발생

- 구현 문제 꿀팁
    탐색해야할 전체 데이터의 갯수가 100만개 이하일 때 완전 탐색을 사용하면 적절하다

- 구현 문제 잘푸는 팁
    바로 코딩 들어가지말고 어느 정도 도식화한 다음 들어가기

- 디버깅은 툴을 쓸수없으니 직접 출력해보면서 하면 됨

- enumerate : 리스트의 원소에 순서값을 부여해주는 함수
    -> 데이터와 인덱스 값(0부터 시작)을 포함하는 enumerate 객체를 리턴








